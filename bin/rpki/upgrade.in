#!/bin/sh

@SETUP_ENVIRONMENT@

usage () {
    echo >&2 "Usage: $0 <old version number>"
    echo >&2
    echo >&2 "This script upgrades @PACKAGE_NAME@'s data in place. Consider"
    echo >&2 "backing up your data and configuration before running this."
    echo >&2
    echo >&2 "The only argument this script takes is the version number of"
    echo >&2 "@PACKAGE_NAME@ that was used to create the existing data."
    echo >&2 "This should be the version you're upgrading from."
}


# This variable and these functions support delaying of printing specific
# messages until the end of the script so the user is more likely to notice
# them.
MSGS=""
add_msg () {
    local FORMAT

    # format string for printf
    FORMAT="$1"
    shift

    printf "$FORMAT\n" "$@" >&2

    if test -z "$MSGS"; then
        MSGS="$(printf "$FORMAT" "$@")"
    else
        MSGS="$MSGS$(printf "\n\n\n$FORMAT" "$@")"
    fi
}
show_msgs () {
    if test -z "$MSGS"; then
        return 0
    else
        echo >&2
        echo >&2
        echo >&2 "================================================"
        echo >&2 "WARNING: not all upgrade actions could complete:"
        echo >&2
        echo >&2
        echo >&2 "$MSGS"
        echo >&2
        echo >&2
        echo >&2 "================================================"
        return 1
    fi
}

clear_rpki_rtr_done=false
clear_rpki_rtr() {
    ! "${clear_rpki_rtr_done}" || return 0

    log "Clearing rpki-rtr data..."
    rpki-rtr-clear -f || fatal "Could not clear rpki-rtr data."
    clear_rpki_rtr_done=true

}

finalize() {
    if "${clear_rpki_rtr_done}"; then
        log "Re-initializing rpki-rtr data."
        rpki-rtr-initialize || fatal "Could not re-initialize rpki-rtr."

        # Don't run rpki-rtr-update here, because it's possible that
        # the user has tweaked their local cache in some way that
        # they're not ready to push out to routers yet. In the nominal
        # case, our not running rpki-rtr-update here isn't a big deal
        # because it will be run reasonably soon by cron, and the
        # routers should be configured with multiple cache servers
        # anyway.
        add_msg "\
The rpki-rtr data was cleared and re-initialized, but no updates were
created.  If you want to start sending data to routers again, run
%s-rpki-rtr-update." \
            "@PACKAGE_NAME@"
    fi

    show_msgs || exit $?
}

upgrade_from_0_12 () {
    mysql_cmd <<\EOF || fatal "failed to update database records"
ALTER TABLE `rpki_cert` DROP COLUMN `sigval`;
ALTER TABLE `rpki_roa` DROP COLUMN `sigval`;
EOF
}

upgrade_from_0_11 () {
    ltam_certs=$(
        mysql_cmd -N -B <<\EOF || fatal "failed to check for LTAM certs"
SELECT COUNT(*) FROM `rpki_cert` WHERE (`flags` & 0xe00) != 0;
EOF
    ) || exit 1
    [ 0 -eq "${ltam_certs}" ] || fatal "Your database has\
 ${ltam_certs} certificate(s) with an LTAM flag set, but\
 @PACKAGE_NAME@ v0.12 and newer no longer supports LTAM.  Unable to\
 upgrade without potentially incorrect results.  Either downgrade to\
 v0.11 or re-initialize the database via @PACKAGE_NAME@-initialize."

    # v0.12 eliminated the SCM_FLAG_NOCHAIN flag.  Any record with
    # that flag set should be considered invalid instead.
    mysql_cmd <<\EOF || fatal "failed to update database records"
ALTER TABLE rpki_manifest DROP COLUMN cert_id;
DROP INDEX `dirname` ON `rpki_dir`;
CREATE INDEX `dirname` ON `rpki_dir` (`dirname`(512));
ALTER TABLE `rpki_metadata`
    DROP COLUMN `rs_last`,
    DROP COLUMN `qu_last`,
    DROP COLUMN `gc_last`,
    DROP COLUMN `ch_last`;
UPDATE rpki_cert SET flags=(flags & (~0x4) & (~0x8))
    WHERE (flags & 0x8) != 0;
UPDATE rpki_crl SET flags=(flags & (~0x4) & (~0x8))
    WHERE (flags & 0x8) != 0;
UPDATE rpki_ghostbusters SET flags=(flags & (~0x4) & (~0x8))
    WHERE (flags & 0x8) != 0;
UPDATE rpki_manifest SET flags=(flags & (~0x4) & (~0x8))
    WHERE (flags & 0x8) != 0;
UPDATE rpki_roa SET flags=(flags & (~0x4) & (~0x8))
    WHERE (flags & 0x8) != 0;
EOF
    clear_rpki_rtr

    upgrade_from_0_12
}

upgrade_from_0_10 () {
    clear_rpki_rtr

    log "Removing all ROAs from the database before altering schema."
    RPKICacheDir=$(try config_get RPKICacheDir) || exit 1
    find "${RPKICacheDir}" -type f -name \*.roa -exec sh -c '
             ret=0
             for f in "$@"; do
                 rcli -d "${f}" || ret=1
             done
             exit "${ret}"
         ' - '{}' + \
         || add_msg "\
Potentially failed to remove all ROA files before upgrading the
database schema. This is probably not a problem."

    log "Updating the database schema."
    mysql_cmd <<\EOF || fatal "Could not update the database schema."
ALTER TABLE rpki_roa DROP COLUMN ip_addrs;

CREATE TABLE rpki_roa_prefix (
    roa_local_id INT UNSIGNED NOT NULL,
    prefix VARBINARY(16) NOT NULL,
    prefix_length TINYINT UNSIGNED NOT NULL,
    prefix_max_length TINYINT UNSIGNED NOT NULL,
    KEY (roa_local_id, prefix),
    FOREIGN KEY (roa_local_id) REFERENCES rpki_roa (local_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CHECK (length(prefix) = 4 OR length(prefix) = 16),
    CHECK (prefix_length <= prefix_max_length),
    CHECK (prefix_max_length <= length(prefix) * 8));

ALTER TABLE rtr_full
    DROP PRIMARY KEY,
    DROP COLUMN ip_addr,
    ADD COLUMN (
        prefix VARBINARY(16) NOT NULL,
        prefix_length TINYINT UNSIGNED NOT NULL,
        prefix_max_length TINYINT UNSIGNED NOT NULL),
    ADD CHECK (length(prefix) = 4 OR length(prefix) = 16),
    ADD CHECK (prefix_length <= prefix_max_length),
    ADD CHECK (prefix_max_length <= length(prefix) * 8),
    ADD PRIMARY KEY (serial_num, asn, prefix, prefix_length, prefix_max_length);

ALTER TABLE rtr_incremental
    DROP PRIMARY KEY,
    DROP COLUMN ip_addr,
    ADD COLUMN (
        prefix VARBINARY(16) NOT NULL,
        prefix_length TINYINT UNSIGNED NOT NULL,
        prefix_max_length TINYINT UNSIGNED NOT NULL),
    ADD CHECK (length(prefix) = 4 OR length(prefix) = 16),
    ADD CHECK (prefix_length <= prefix_max_length),
    ADD CHECK (prefix_max_length <= length(prefix) * 8),
    ADD PRIMARY KEY (serial_num, asn, prefix, prefix_length, prefix_max_length);
EOF

    log "Re-adding ROAs with new schema."
    find "${RPKICacheDir}" -type f -name \*.roa -print \
        | rcli -l || fatal "Failed to re-add ROAs."

    upgrade_from_0_11
}

upgrade_from_0_9 () {
    upgrade_from_0_10
    return $?
}

upgrade_from_0_8 () {
    echo "Attempting to create @pkgvarlibdir@."
    mkdir -p "@pkgvarlibdir@" && chmod 700 "@pkgvarlibdir@" \
        || add_msg "%s\n%s\n%s\n%s" \
            "Creating @pkgvarlibdir@ failed." \
            "Please run the following commands as root:" \
            "    mkdir -p \"@pkgvarlibdir@\"" \
            "    chmod 700 \"@pkgvarlibdir@\""

    upgrade_from_0_9
    return $?
}

upgrade_from_0_7 () {
    echo "Adding SKI index to the manifest table. This may take a few minutes."
    echo "ALTER TABLE rpki_manifest ADD KEY ski (ski);" \
        | mysql_cmd || \
    {
        error "Could not add SKI index to manifest table."
        return 1
    }

    echo "Creating new table for Ghostbusters Records."
    echo \
        "CREATE TABLE rpki_ghostbusters (" \
        "    filename VARCHAR(256) NOT NULL," \
        "    dir_id   INT UNSIGNED NOT NULL DEFAULT 1," \
        "    local_id INT UNSIGNED NOT NULL UNIQUE," \
        "    ski      VARCHAR(128) NOT NULL," \
        "    hash     VARCHAR(256)," \
        "    flags    INT UNSIGNED DEFAULT 0," \
        "             PRIMARY KEY (filename, dir_id)," \
        "             KEY lid (local_id)," \
        "             KEY ski (ski)" \
        ");" \
        | mysql_cmd || \
    {
        error "Could not create table rpki_ghostbusters"
        return 1
    }

    echo "Adding Ghostbusters Records to the database."
    find "`config_get RPKICacheDir`" -type f -name \*.gbr -print \
        | rcli -l

    upgrade_from_0_8
    return $?
}


if test $# -ne 1; then
    usage_fatal "This script takes exactly one argument."
fi

OLD_VERSION="$1"

case "$OLD_VERSION" in
    -h | --help)
        usage
        exit 0
        ;;

    0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6)
        fatal "Automatic upgrades from releases before 0.7 are not supported." \
              "Please contact @PACKAGE_BUGREPORT@ for assistance with a" \
              "manual upgrade."
        ;;

    0.7)
        upgrade_from_0_7 || exit $?
        ;;

    0.8)
        upgrade_from_0_8 || exit $?
        ;;

    0.9)
        upgrade_from_0_9 || exit $?
        ;;

    0.10)
        upgrade_from_0_10 || exit $?
        ;;

    0.11)
        upgrade_from_0_11 || exit $?
        ;;

    0.12)
        upgrade_from_0_12 || exit $?
        ;;

    "@PACKAGE_VERSION@")
        usage_fatal "Please specify the version you're upgrading from, not" \
                    "the version you're upgrading to."
        ;;

    *)
        fatal "Unrecognized version number: $OLD_VERSION"
        ;;
esac

finalize

echo
echo "Successfully upgraded from $OLD_VERSION to @PACKAGE_VERSION@."
